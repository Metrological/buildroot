diff -Naur linux/arch/arm/kernel/devtree.c linux-custom/arch/arm/kernel/devtree.c
--- linux/arch/arm/kernel/devtree.c	2015-04-25 06:29:57.000000000 +0200
+++ linux-custom/arch/arm/kernel/devtree.c	2015-09-19 00:18:42.000000000 +0200
@@ -50,6 +50,9 @@
 		u32 dtb_size = be32_to_cpu(initial_boot_params->totalsize);
 		void *virt_new_dtb;
 
+		if (phys_start < 0x200000) // prevent SDDB from being overwritten by dtb
+			continue;
+
 		if ((phys_end - phys_start) < dtb_size)
 			continue;
 
diff -Naur linux/arch/arm/mach-bcm/pci-brcmstb.c linux-custom/arch/arm/mach-bcm/pci-brcmstb.c
--- linux/arch/arm/mach-bcm/pci-brcmstb.c	2015-04-25 06:29:57.000000000 +0200
+++ linux-custom/arch/arm/mach-bcm/pci-brcmstb.c	2015-09-19 00:18:42.000000000 +0200
@@ -307,8 +307,8 @@
 	__raw_writel(0x00000011, base + PCIE_MISC_RC_BAR2_CONFIG_LO);
 	__raw_writel(0x00000000, base + PCIE_MISC_RC_BAR2_CONFIG_HI);
 
-	/* field: SCB0_SIZE = 1 Gb */
-	wr_fld(base + PCIE_MISC_MISC_CTRL, 0xf8000000, 27, 0x0f);
+	/* field: SCB0_SIZE = 2 Gb (the latter 1GB is a memory hole */
+	wr_fld(base + PCIE_MISC_MISC_CTRL, 0xf8000000, 27, 0x10);
 	/* field: SCB1_SIZE = 1 Gb */
 	if (num_memc > 1)
 		wr_fld(base + PCIE_MISC_MISC_CTRL, 0x07c00000, 22, 0x0f);
diff -Naur linux/arch/arm/Makefile linux-custom/arch/arm/Makefile
--- linux/arch/arm/Makefile	2015-04-25 06:29:57.000000000 +0200
+++ linux-custom/arch/arm/Makefile	2015-09-19 00:12:47.000000000 +0200
@@ -129,6 +129,7 @@
 head-y		:= arch/arm/kernel/head$(MMUEXT).o
 textofs-y	:= 0x00008000
 textofs-$(CONFIG_ARCH_CLPS711X) := 0x00028000
+textofs-$(CONFIG_BRCMSTB)       := 0x00208000
 # We don't want the htc bootloader to corrupt kernel during resume
 textofs-$(CONFIG_PM_H1940)      := 0x00108000
 # SA1111 DMA bug: we don't want the kernel to live in precious DMA-able memory
diff -Naur linux/arch/arm/mm/mmap.c linux-custom/arch/arm/mm/mmap.c
--- linux/arch/arm/mm/mmap.c	2015-04-25 06:29:58.000000000 +0200
+++ linux-custom/arch/arm/mm/mmap.c	2015-09-19 00:12:47.000000000 +0200
@@ -222,6 +222,8 @@
  */
 int devmem_is_allowed(unsigned long pfn)
 {
+	if (pfn < 512)
+		return 1;
 	if (iomem_is_exclusive(pfn << PAGE_SHIFT))
 		return 0;
 	if (!page_is_ram(pfn))
diff -Naur linux/arch/powerpc/platforms/powernv/pci.c linux-custom/arch/powerpc/platforms/powernv/pci.c
--- linux/arch/powerpc/platforms/powernv/pci.c	2015-04-25 06:29:59.000000000 +0200
+++ linux-custom/arch/powerpc/platforms/powernv/pci.c	2015-09-19 00:12:48.000000000 +0200
@@ -1,4 +1,3 @@
-
 /*
  * Support PCI/PCIe on PowerNV platforms
  *
diff -Naur linux/arch/sh/boot/compressed/vmlinux.scr linux-custom/arch/sh/boot/compressed/vmlinux.scr
--- linux/arch/sh/boot/compressed/vmlinux.scr	2015-04-25 06:29:59.000000000 +0200
+++ linux-custom/arch/sh/boot/compressed/vmlinux.scr	1970-01-01 01:00:00.000000000 +0100
@@ -1,10 +0,0 @@
-SECTIONS
-{
-  .rodata..compressed : {
-	input_len = .;
-	LONG(input_data_end - input_data) input_data = .;
-	*(.data)
-	output_len = . - 4;
-	input_data_end = .;
-	}
-}
diff -Naur linux/arch/sh/boot/romimage/vmlinux.scr linux-custom/arch/sh/boot/romimage/vmlinux.scr
--- linux/arch/sh/boot/romimage/vmlinux.scr	2015-04-25 06:29:59.000000000 +0200
+++ linux-custom/arch/sh/boot/romimage/vmlinux.scr	1970-01-01 01:00:00.000000000 +0100
@@ -1,8 +0,0 @@
-SECTIONS
-{
-  .text : {
-	zero_page_pos = .;
-	*(.data)
-	end_data = .;
-	}
-}
diff -Naur linux/arch/sparc/mm/init_64.c linux-custom/arch/sparc/mm/init_64.c
--- linux/arch/sparc/mm/init_64.c	2015-04-25 06:29:59.000000000 +0200
+++ linux-custom/arch/sparc/mm/init_64.c	2015-09-19 00:12:48.000000000 +0200
@@ -2308,6 +2308,7 @@
 void vmemmap_free(unsigned long start, unsigned long end)
 {
 }
+
 #endif /* CONFIG_SPARSEMEM_VMEMMAP */
 
 static void prot_init_common(unsigned long page_none,
diff -Naur linux/arch/x86/kernel/entry_64.S linux-custom/arch/x86/kernel/entry_64.S
--- linux/arch/x86/kernel/entry_64.S	2015-04-25 06:29:59.000000000 +0200
+++ linux-custom/arch/x86/kernel/entry_64.S	2015-09-19 00:12:49.000000000 +0200
@@ -1131,9 +1131,9 @@
 	call preempt_schedule_irq
 	jmp exit_intr
 #endif
+
 	CFI_ENDPROC
 END(common_interrupt)
-
 /*
  * End of kprobes section
  */
diff -Naur linux/arch/x86/kvm/x86.c linux-custom/arch/x86/kvm/x86.c
--- linux/arch/x86/kvm/x86.c	2015-04-25 06:29:59.000000000 +0200
+++ linux-custom/arch/x86/kvm/x86.c	2015-09-19 00:12:49.000000000 +0200
@@ -951,6 +951,7 @@
 }
 EXPORT_SYMBOL_GPL(kvm_enable_efer_bits);
 
+
 /*
  * Writes msr value into into the appropriate "register".
  * Returns 0 on success, non-0 otherwise.
diff -Naur linux/drivers/char/bmoca.c linux-custom/drivers/char/bmoca.c
--- linux/drivers/char/bmoca.c	2015-04-25 06:29:59.000000000 +0200
+++ linux-custom/drivers/char/bmoca.c	2015-09-19 00:12:49.000000000 +0200
@@ -1403,10 +1403,8 @@
 
 	mutex_lock(&priv->dev_mutex);
 
-
 	if (priv->enabled) {
 		mask = moca_irq_status(priv, FLUSH_IRQ);
-
 		if (mask & M2H_DMA) {
 			mask &= ~M2H_DMA;
 			complete(&priv->copy_complete);
@@ -2450,6 +2448,7 @@
 	long timeout = msecs_to_jiffies(MOCA_SUSPEND_TIMEOUT_MS);
 
 	mutex_lock(&priv->dev_mutex);
+
 	if (moca_in_reset(priv)) {
 		dev_warn(priv->dev, "MoCA core powered off\n");
 		goto out;
@@ -2490,7 +2489,6 @@
 	int rc;
 
 	mutex_lock(&priv->dev_mutex);
-
 	if (moca_in_reset(priv)) {
 		dev_warn(priv->dev, "MoCA core in reset\n");
 		goto out;
@@ -2694,6 +2692,7 @@
 			sizeof(struct bsc_regs));
 
 	/* leave core in reset until we get an ioctl */
+
 	moca_hw_reset(priv);
 
 	if (request_irq(priv->irq, moca_interrupt, 0, "moca",
diff -Naur linux/drivers/net/ethernet/broadcom/genet/bcmgenet.h linux-custom/drivers/net/ethernet/broadcom/genet/bcmgenet.h
--- linux/drivers/net/ethernet/broadcom/genet/bcmgenet.h	2015-04-25 06:30:00.000000000 +0200
+++ linux-custom/drivers/net/ethernet/broadcom/genet/bcmgenet.h	2015-09-19 00:18:42.000000000 +0200
@@ -579,6 +579,7 @@
 	wait_queue_head_t	wq;		/* mii wait queue */
 	struct phy_device *phydev;
 	struct device_node *phy_dn;
+	struct device_node *mdio_dn;
 	struct mii_bus *mii_bus;
 	u16 gphy_rev;
 	struct clk *clk_eee;
diff -Naur linux/drivers/net/ethernet/broadcom/genet/bcmmii.c linux-custom/drivers/net/ethernet/broadcom/genet/bcmmii.c
--- linux/drivers/net/ethernet/broadcom/genet/bcmmii.c	2015-04-25 06:30:00.000000000 +0200
+++ linux-custom/drivers/net/ethernet/broadcom/genet/bcmmii.c	2015-09-19 00:18:42.000000000 +0200
@@ -276,7 +276,6 @@
 					bcmgenet_mii_setup,
 					priv->phy_interface);
 	}
-
 	if (!phydev) {
 		pr_err("could not attach to PHY\n");
 		return -ENODEV;
@@ -297,6 +296,52 @@
 	return 0;
 }
 
+/* Workaround for integrated BCM7xxx Gigabit PHYs which have a problem with
+ * their internal MDIO management controller making them fail to successfully
+ * be read from or written to for the first transaction.  We insert a dummy
+ * BMSR read here to make sure that phy_get_device() and get_phy_id() can
+ * correctly read the PHY MII_PHYSID1/2 registers and successfully register a
+ * PHY device for this peripheral.
+ *
+ * Once the PHY driver is registered, we can workaround subsequent reads from
+ * there (e.g: during system-wide power management).
+ *
+ * bus->reset is invoked before mdiobus_scan during mdiobus_register and is
+ * therefore the right location to stick that workaround. Since we do not want
+ * to read from non-existing PHYs, we either use bus->phy_mask or do a manual
+ * Device Tree scan to limit the search area.
+ */
+static int bcmgenet_mii_bus_reset(struct mii_bus *bus)
+{
+       struct net_device *dev = bus->priv;
+       struct bcmgenet_priv *priv = netdev_priv(dev);
+       struct device_node *np = priv->mdio_dn;
+       struct device_node *child = NULL;
+       u32 read_mask = 0;
+       int addr = 0;
+
+       if (!np) {
+               read_mask = 1 << priv->phy_addr;
+       } else {
+               for_each_available_child_of_node(np, child) {
+                       addr = of_mdio_parse_addr(&dev->dev, child);
+                       if (addr < 0)
+                               continue;
+
+                       read_mask |= 1 << addr;
+               }
+       }
+
+       for (addr = 0; addr < PHY_MAX_ADDR; addr++) {
+               if (read_mask & 1 << addr) {
+                       dev_dbg(&dev->dev, "Workaround for PHY @ %d\n", addr);
+                       mdiobus_read(bus, addr, MII_BMSR);
+               }
+       }
+
+       return 0;
+}
+
 static int bcmgenet_mii_alloc(struct bcmgenet_priv *priv)
 {
 	struct mii_bus *bus;
@@ -317,6 +362,7 @@
 	bus->parent = &priv->pdev->dev;
 	bus->read = bcmgenet_mii_read;
 	bus->write = bcmgenet_mii_write;
+	bus->reset = bcmgenet_mii_bus_reset;
 	if (priv->old_dt_binding)
 		bus->phy_mask = ~(1 << priv->phy_addr);
 	snprintf(bus->id, MII_BUS_ID_SIZE, "%s-%d",
@@ -475,20 +521,19 @@
 {
 	struct device_node *dn = priv->pdev->dev.of_node;
 	struct device *kdev = &priv->pdev->dev;
-	struct device_node *mdio_dn;
 	const char *phy_mode_str = NULL;
 	const __be32 *fixed_link;
 	u32 propval;
 	int phy_mode;
 	int ret, sz;
 
-	mdio_dn = of_get_next_child(dn, NULL);
-	if (!mdio_dn) {
+	priv->mdio_dn = of_get_next_child(dn, NULL);
+        if (!priv->mdio_dn) {
 		dev_err(kdev, "unable to find MDIO bus node\n");
 		return -ENODEV;
 	}
 
-	ret = of_mdiobus_register(priv->mii_bus, mdio_dn);
+	ret = of_mdiobus_register(priv->mii_bus, priv->mdio_dn);
 	if (ret) {
 		dev_err(kdev, "failed to register MDIO bus\n");
 		return ret;
diff -Naur linux/drivers/net/phy/bcm7xxx.c linux-custom/drivers/net/phy/bcm7xxx.c
--- linux/drivers/net/phy/bcm7xxx.c	2015-04-25 06:30:00.000000000 +0200
+++ linux-custom/drivers/net/phy/bcm7xxx.c	2015-09-19 00:18:42.000000000 +0200
@@ -215,6 +215,13 @@
 	pr_info_once("%s: %s PHY revision: 0x%02x, patch: %d\n",
 		     dev_name(&phydev->dev), phydev->drv->name, rev, patch);
 
+        /* Dummy read to a register to workaround an issue upon reset where the
+         * internal inverter may not allow the first MDIO transaction to pass
+         * the MDIO management controller and make us return 0xffff for such
+         * reads.
+         */
+        phy_read(phydev, MII_BMSR);
+
 	switch (rev) {
 	case 0xb0:
 		ret = bcm7xxx_28nm_b0_afe_config_init(phydev);
diff -Naur linux/drivers/net/phy/mdio-unimac.c linux-custom/drivers/net/phy/mdio-unimac.c
--- linux/drivers/net/phy/mdio-unimac.c	2015-04-25 06:30:00.000000000 +0200
+++ linux-custom/drivers/net/phy/mdio-unimac.c	2015-09-19 00:18:42.000000000 +0200
@@ -115,6 +115,48 @@
 	return 0;
 }
 
+/* Workaround for integrated BCM7xxx Gigabit PHYs which have a problem with
+ * their internal MDIO management controller making them fail to successfully
+ * be read from or written to for the first transaction.  We insert a dummy
+ * BMSR read here to make sure that phy_get_device() and get_phy_id() can
+ * correctly read the PHY MII_PHYSID1/2 registers and successfully register a
+ * PHY device for this peripheral.
+ *
+ * Once the PHY driver is registered, we can workaround subsequent reads from
+ * there (e.g: during system-wide power management).
+ *
+ * bus->reset is invoked before mdiobus_scan during mdiobus_register and is
+ * therefore the right location to stick that workaround. Since we do not want
+ * to read from non-existing PHYs, we either use bus->phy_mask or do a manual
+ * Device Tree scan to limit the search area.
+ */
+static int unimac_mdio_reset(struct mii_bus *bus)
+{
+        struct device_node *np = bus->dev.of_node;
+        struct device_node *child;
+        u32 read_mask = 0;
+        int addr;
+ 
+        if (!np) {
+                read_mask = ~bus->phy_mask;
+        } else {
+                for_each_available_child_of_node(np, child) {
+                        addr = of_mdio_parse_addr(&bus->dev, child);
+                        if (addr < 0)
+                                continue;
+ 
+                        read_mask |= 1 << addr;
+                }
+        }
+ 
+        for (addr = 0; addr < PHY_MAX_ADDR; addr++) {
+                if (read_mask & 1 << addr)
+                        mdiobus_read(bus, addr, MII_BMSR);
+        }
+ 
+        return 0;
+}
+
 static int unimac_mdio_probe(struct platform_device *pdev)
 {
 	struct unimac_mdio_priv *priv;
@@ -150,6 +192,7 @@
 	bus->parent = &pdev->dev;
 	bus->read = unimac_mdio_read;
 	bus->write = unimac_mdio_write;
+	bus->reset = unimac_mdio_reset;
 	snprintf(bus->id, MII_BUS_ID_SIZE, "%s", pdev->name);
 
 	bus->irq = kzalloc(sizeof(int) * PHY_MAX_ADDR, GFP_KERNEL);
diff -Naur linux/drivers/of/of_mdio.c linux-custom/drivers/of/of_mdio.c
--- linux/drivers/of/of_mdio.c	2015-04-25 06:30:00.000000000 +0200
+++ linux-custom/drivers/of/of_mdio.c	2015-09-19 00:18:42.000000000 +0200
@@ -93,6 +93,28 @@
 	return 0;
 }
 
+int of_mdio_parse_addr(struct device *dev, const struct device_node *np)
+{
+       u32 addr;
+       int ret;
+
+       ret = of_property_read_u32(np, "reg", &addr);
+       if (ret < 0) {
+               dev_err(dev, "%s has invalid PHY address\n", np->full_name);
+               return ret;
+       }
+
+       /* A PHY must have a reg property in the range [0-31] */
+       if (addr >= PHY_MAX_ADDR) {
+               dev_err(dev, "%s PHY address %i is too large\n",
+                       np->full_name, addr);
+               return -EINVAL;
+       }
+
+       return addr;
+}
+EXPORT_SYMBOL(of_mdio_parse_addr);
+
 /**
  * of_mdiobus_register - Register mii_bus and create PHYs from the device tree
  * @mdio: pointer to mii_bus structure
@@ -105,9 +127,8 @@
 {
 	struct device_node *child;
 	const __be32 *paddr;
-	u32 addr;
 	bool scanphys = false;
-	int rc, i, len;
+	int addr, rc, i;
 
 	/* Mask out all PHYs from auto probing.  Instead the PHYs listed in
 	 * the device tree are populated after the bus has been registered */
@@ -127,19 +148,9 @@
 
 	/* Loop over the child nodes and register a phy_device for each one */
 	for_each_available_child_of_node(np, child) {
-		/* A PHY must have a reg property in the range [0-31] */
-		paddr = of_get_property(child, "reg", &len);
-		if (!paddr || len < sizeof(*paddr)) {
+		addr = of_mdio_parse_addr(&mdio->dev, child);
+                if (addr < 0) {
 			scanphys = true;
-			dev_err(&mdio->dev, "%s has invalid PHY address\n",
-				child->full_name);
-			continue;
-		}
-
-		addr = be32_to_cpup(paddr);
-		if (addr >= PHY_MAX_ADDR) {
-			dev_err(&mdio->dev, "%s PHY address %i is too large\n",
-				child->full_name, addr);
 			continue;
 		}
 
@@ -154,7 +165,7 @@
 	/* auto scan for PHYs with empty reg property */
 	for_each_available_child_of_node(np, child) {
 		/* Skip PHYs with reg property set */
-		paddr = of_get_property(child, "reg", &len);
+		paddr = of_get_property(child, "reg", NULL);
 		if (paddr)
 			continue;
 
diff -Naur linux/.git linux-custom/.git
--- linux/.git	2015-04-25 06:29:56.000000000 +0200
+++ linux-custom/.git	1970-01-01 01:00:00.000000000 +0100
@@ -1 +0,0 @@
-gitdir: ../.git/modules/linux
diff -Naur linux/include/linux/clk-provider.h linux-custom/include/linux/clk-provider.h
--- linux/include/linux/clk-provider.h	2015-04-25 06:30:02.000000000 +0200
+++ linux-custom/include/linux/clk-provider.h	2015-09-19 00:12:52.000000000 +0200
@@ -403,7 +403,6 @@
 };
 
 extern struct clk_ops clk_fixed_factor_ops;
-
 struct clk *clk_register_fixed_factor(struct device *dev, const char *name,
 		const char *parent_name, unsigned long flags,
 		unsigned int mult, unsigned int div);
diff -Naur linux/include/linux/of_mdio.h linux-custom/include/linux/of_mdio.h
--- linux/include/linux/of_mdio.h	2015-04-25 06:30:02.000000000 +0200
+++ linux-custom/include/linux/of_mdio.h	2015-09-19 00:18:42.000000000 +0200
@@ -27,6 +27,7 @@
 					 phy_interface_t iface);
 
 extern struct mii_bus *of_mdio_find_bus(struct device_node *mdio_np);
+extern int of_mdio_parse_addr(struct device *dev, const struct device_node *np);
 
 #else /* CONFIG_OF */
 static inline int of_mdiobus_register(struct mii_bus *mdio, struct device_node *np)
@@ -65,6 +66,12 @@
 {
 	return NULL;
 }
+
+static inline int of_mdio_parse_addr(struct device *dev,
+                                    const struct device_node *np)
+{
+       return -ENOSYS;
+}
 #endif /* CONFIG_OF */
 
 #endif /* __LINUX_OF_MDIO_H */
diff -Naur linux/mm/page_alloc.c linux-custom/mm/page_alloc.c
--- linux/mm/page_alloc.c	2015-04-25 06:30:02.000000000 +0200
+++ linux-custom/mm/page_alloc.c	2015-09-19 00:12:53.000000000 +0200
@@ -6478,6 +6478,7 @@
 		goto done;
 	}
 
+
 	/* Grab isolated pages from freelists. */
 	outer_end = isolate_freepages_range(&cc, outer_start, end);
 	if (!outer_end) {
diff -Naur linux/net/ceph/crypto.c linux-custom/net/ceph/crypto.c
--- linux/net/ceph/crypto.c	2015-04-25 06:30:02.000000000 +0200
+++ linux-custom/net/ceph/crypto.c	2015-09-19 00:12:53.000000000 +0200
@@ -374,6 +374,7 @@
 	crypto_blkcipher_setkey((void *)tfm, key, key_len);
 	iv = crypto_blkcipher_crt(tfm)->iv;
 	ivsize = crypto_blkcipher_ivsize(tfm);
+
 	memcpy(iv, aes_iv, ivsize);
 
 	/*
diff -Naur linux/net/sctp/sm_make_chunk.c linux-custom/net/sctp/sm_make_chunk.c
--- linux/net/sctp/sm_make_chunk.c	2015-04-25 06:30:02.000000000 +0200
+++ linux-custom/net/sctp/sm_make_chunk.c	2015-09-19 00:12:53.000000000 +0200
@@ -3185,6 +3185,7 @@
 	union sctp_addr_param	*addr_param;
 	sctp_addip_param_t	*asconf_param;
 	struct sctp_chunk	*asconf_ack;
+
 	__be16	err_code;
 	int	length = 0;
 	int	chunk_len;
diff -Naur linux/net/sctp/ulpevent.c linux-custom/net/sctp/ulpevent.c
--- linux/net/sctp/ulpevent.c	2015-04-25 06:30:02.000000000 +0200
+++ linux-custom/net/sctp/ulpevent.c	2015-09-19 00:12:53.000000000 +0200
@@ -414,6 +414,7 @@
 	sre->sre_assoc_id = sctp_assoc2id(asoc);
 
 	return event;
+
 fail:
 	return NULL;
 }
