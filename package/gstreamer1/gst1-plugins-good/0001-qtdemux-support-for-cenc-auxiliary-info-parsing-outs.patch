From bfbdb91367809cb32d1d82f65730748d9af181f6 Mon Sep 17 00:00:00 2001
From: Philippe Normand <philn@igalia.com>
Date: Wed, 12 Aug 2015 13:35:40 +0200
Subject: [PATCH] qtdemux: support for cenc auxiliary info parsing outside of
 moof box

When the cenc aux info index is out of moof boundaries, keep track of
it and parse the beginning of the mdat box, before the first sample.

https://bugzilla.gnome.org/show_bug.cgi?id=705991
---
 gst/isomp4/qtdemux.c | 59 +++++++++++++++++++++++++++++++++++++---------------
 gst/isomp4/qtdemux.h |  4 ++++
 2 files changed, 46 insertions(+), 17 deletions(-)

diff --git a/gst/isomp4/qtdemux.c b/gst/isomp4/qtdemux.c
index 288848c..6d5b4cf 100644
--- a/gst/isomp4/qtdemux.c
+++ b/gst/isomp4/qtdemux.c
@@ -624,6 +624,11 @@ gst_qtdemux_dispose (GObject * object)
       NULL);
   g_queue_clear (&qtdemux->protection_event_queue);
 
+  if (qtdemux->info_sizes) {
+    g_free (qtdemux->info_sizes);
+    qtdemux->info_sizes = NULL;
+  }
+
   G_OBJECT_CLASS (parent_class)->dispose (object);
 }
 
@@ -3363,15 +3368,16 @@ qtdemux_parse_moof (GstQTDemux * qtdemux, const guint8 * buffer, guint length,
         qtdemux_tree_get_child_by_type_full (traf_node, FOURCC_saiz,
         &saiz_data);
     if (saiz_node) {
-      guint8 *info_sizes;
-      guint32 sample_count;
       guint32 info_type = 0;
       guint64 offset = 0;
       guint32 info_type_parameter = 0;
 
-      info_sizes = qtdemux_parse_saiz (qtdemux, stream, &saiz_data,
-          &sample_count);
-      if (G_UNLIKELY (info_sizes == NULL)) {
+      if (G_UNLIKELY (qtdemux->info_sizes != NULL)) {
+        g_free (qtdemux->info_sizes);
+      }
+      qtdemux->info_sizes = qtdemux_parse_saiz (qtdemux, stream, &saiz_data,
+          &qtdemux->sample_count);
+      if (G_UNLIKELY (qtdemux->info_sizes == NULL)) {
         GST_ERROR_OBJECT (qtdemux, "failed to parse saiz box");
         goto fail;
       }
@@ -3380,13 +3386,14 @@ qtdemux_parse_moof (GstQTDemux * qtdemux, const guint8 * buffer, guint length,
           &saio_data);
       if (!saio_node) {
         GST_ERROR_OBJECT (qtdemux, "saiz box without a corresponding saio box");
+        g_free (qtdemux->info_sizes);
         goto fail;
       }
 
       if (G_UNLIKELY (!qtdemux_parse_saio (qtdemux, stream, &saio_data,
                   &info_type, &info_type_parameter, &offset))) {
         GST_ERROR_OBJECT (qtdemux, "failed to parse saio box");
-        g_free (info_sizes);
+        g_free (qtdemux->info_sizes);
         goto fail;
       }
       offset += (base_offset > 0) ? (guint64) base_offset : 0;
@@ -3394,19 +3401,18 @@ qtdemux_parse_moof (GstQTDemux * qtdemux, const guint8 * buffer, guint length,
       if (info_type == FOURCC_cenc && info_type_parameter == 0U) {
         GstByteReader br;
         if (offset > length) {
-          GST_ERROR_OBJECT (qtdemux, "cenc auxiliary info outside moof "
-              "boxes is not supported");
-          g_free (info_sizes);
-          goto fail;
-        }
-        gst_byte_reader_init (&br, buffer + offset, length - offset);
-        if (!qtdemux_parse_cenc_aux_info (qtdemux, stream, &br,
-                info_sizes, sample_count)) {
-          GST_ERROR_OBJECT (qtdemux, "failed to parse cenc auxiliary info");
-          goto fail;
+          GST_DEBUG_OBJECT (qtdemux, "cenc auxiliary info stored out of moof");
+          qtdemux->cenc_aux_info_offset = offset;
+        } else {
+          gst_byte_reader_init (&br, buffer + offset, length - offset);
+          if (!qtdemux_parse_cenc_aux_info (qtdemux, stream, &br,
+                  qtdemux->info_sizes, qtdemux->sample_count)) {
+            GST_ERROR_OBJECT (qtdemux, "failed to parse cenc auxiliary info");
+            g_free (qtdemux->info_sizes);
+            goto fail;
+          }
         }
       }
-      g_free (info_sizes);
     }
 
     tfdt_node =
@@ -5903,6 +5909,25 @@ gst_qtdemux_process_adapter (GstQTDemux * demux, gboolean force)
         }
 
         if (demux->todrop) {
+          if (demux->cenc_aux_info_offset > 0) {
+            GstByteReader br;
+            const guint8 *data;
+
+            GST_DEBUG_OBJECT (demux, "parsing cenc auxiliary info");
+            data = gst_adapter_map (demux->adapter, demux->todrop);
+            gst_byte_reader_init (&br, data + 8, demux->todrop);
+            if (!qtdemux_parse_cenc_aux_info (demux, demux->streams[0], &br,
+                    demux->info_sizes, demux->sample_count)) {
+              GST_ERROR_OBJECT (demux, "failed to parse cenc auxiliary info");
+              ret = GST_FLOW_ERROR;
+              gst_adapter_unmap (demux->adapter);
+              g_free (demux->info_sizes);
+              goto done;
+            }
+            demux->cenc_aux_info_offset = 0;
+            g_free (demux->info_sizes);
+            gst_adapter_unmap (demux->adapter);
+          }
           gst_qtdemux_drop_data (demux, demux->todrop);
         }
 
diff --git a/gst/isomp4/qtdemux.h b/gst/isomp4/qtdemux.h
index 8f0553b..a34f380 100644
--- a/gst/isomp4/qtdemux.h
+++ b/gst/isomp4/qtdemux.h
@@ -149,6 +149,10 @@ struct _GstQTDemux {
   /* protection support */
   GPtrArray *protection_system_ids; /* Holds identifiers of all content protection systems for all tracks */
   GQueue protection_event_queue; /* holds copy of upstream protection events */
+  guint64 cenc_aux_info_offset;
+  guint8 *info_sizes;
+  guint32 sample_count;
+
 };
 
 struct _GstQTDemuxClass {
-- 
2.5.0

