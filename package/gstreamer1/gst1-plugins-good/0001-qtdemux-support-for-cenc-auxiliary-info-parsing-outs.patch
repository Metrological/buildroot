From d6bfd7533f10bbfde6c20e5f96137ba94686417f Mon Sep 17 00:00:00 2001
From: Philippe Normand <philn@igalia.com>
Date: Mon, 5 Oct 2015 14:09:57 +0000
Subject: [PATCH] qtdemux: support for cenc auxiliary info parsing outside of
 moof box

---
 gst/isomp4/qtdemux.c | 71 ++++++++++++++++++++++++++++++++++++++--------------
 gst/isomp4/qtdemux.h |  4 +++
 2 files changed, 56 insertions(+), 19 deletions(-)

diff --git a/gst/isomp4/qtdemux.c b/gst/isomp4/qtdemux.c
index 2eeb3fe..f8a0685 100644
--- a/gst/isomp4/qtdemux.c
+++ b/gst/isomp4/qtdemux.c
@@ -604,6 +604,9 @@ gst_qtdemux_init (GstQTDemux * qtdemux)
   qtdemux->have_group_id = FALSE;
   qtdemux->group_id = G_MAXUINT;
   qtdemux->protection_system_ids = NULL;
+  qtdemux->cenc_aux_info_offset = 0;
+  qtdemux->info_sizes = NULL;
+  qtdemux->sample_count = 0;
   g_queue_init (&qtdemux->protection_event_queue);
   gst_segment_init (&qtdemux->segment, GST_FORMAT_TIME);
   qtdemux->flowcombiner = gst_flow_combiner_new ();
@@ -625,6 +628,11 @@ gst_qtdemux_dispose (GObject * object)
       NULL);
   g_queue_clear (&qtdemux->protection_event_queue);
 
+  if (qtdemux->info_sizes) {
+    g_free (qtdemux->info_sizes);
+    qtdemux->info_sizes = NULL;
+  }
+
   G_OBJECT_CLASS (parent_class)->dispose (object);
 }
 
@@ -3108,14 +3116,12 @@ qtdemux_parse_saiz (GstQTDemux * qtdemux, QtDemuxStream * stream,
 
 
   if (default_info_size == 0) {
-    if (!gst_byte_reader_dup_data (br, *sample_count, &info_sizes)) {
+    if (!gst_byte_reader_dup_data (br, *sample_count, &info_sizes))
       return NULL;
-    }
   } else {
     info_sizes = g_new (guint8, *sample_count);
     memset (info_sizes, default_info_size, *sample_count);
   }
-
   return info_sizes;
 }
 
@@ -3390,15 +3396,16 @@ qtdemux_parse_moof (GstQTDemux * qtdemux, const guint8 * buffer, guint length,
         qtdemux_tree_get_child_by_type_full (traf_node, FOURCC_saiz,
         &saiz_data);
     if (saiz_node) {
-      guint8 *info_sizes;
-      guint32 sample_count;
       guint32 info_type = 0;
       guint64 offset = 0;
       guint32 info_type_parameter = 0;
 
-      info_sizes = qtdemux_parse_saiz (qtdemux, stream, &saiz_data,
-          &sample_count);
-      if (G_UNLIKELY (info_sizes == NULL)) {
+      if (G_UNLIKELY (qtdemux->info_sizes != NULL))
+        g_free (qtdemux->info_sizes);
+      qtdemux->info_sizes = qtdemux_parse_saiz (qtdemux, stream, &saiz_data,
+          &qtdemux->sample_count);
+
+      if (G_UNLIKELY (qtdemux->info_sizes == NULL)) {
         GST_ERROR_OBJECT (qtdemux, "failed to parse saiz box");
         goto fail;
       }
@@ -3407,13 +3414,16 @@ qtdemux_parse_moof (GstQTDemux * qtdemux, const guint8 * buffer, guint length,
           &saio_data);
       if (!saio_node) {
         GST_ERROR_OBJECT (qtdemux, "saiz box without a corresponding saio box");
+        g_free (qtdemux->info_sizes);
+        qtdemux->info_sizes = NULL;
         goto fail;
       }
 
       if (G_UNLIKELY (!qtdemux_parse_saio (qtdemux, stream, &saio_data,
                   &info_type, &info_type_parameter, &offset))) {
         GST_ERROR_OBJECT (qtdemux, "failed to parse saio box");
-        g_free (info_sizes);
+        g_free (qtdemux->info_sizes);
+        qtdemux->info_sizes = NULL;
         goto fail;
       }
       if (base_offset > qtdemux->moof_offset)
@@ -3421,19 +3431,20 @@ qtdemux_parse_moof (GstQTDemux * qtdemux, const guint8 * buffer, guint length,
       if (info_type == FOURCC_cenc && info_type_parameter == 0U) {
         GstByteReader br;
         if (offset > length) {
-          GST_ERROR_OBJECT (qtdemux, "cenc auxiliary info outside moof "
-              "boxes is not supported");
-          g_free (info_sizes);
-          goto fail;
-        }
-        gst_byte_reader_init (&br, buffer + offset, length - offset);
-        if (!qtdemux_parse_cenc_aux_info (qtdemux, stream, &br,
-                info_sizes, sample_count)) {
-          GST_ERROR_OBJECT (qtdemux, "failed to parse cenc auxiliary info");
+          GST_DEBUG_OBJECT (qtdemux, "cenc auxiliary info stored out of moof");
+          qtdemux->cenc_aux_info_offset = offset;
+        } else {
+          gst_byte_reader_init (&br, buffer + offset, length - offset);
+          if (!qtdemux_parse_cenc_aux_info (qtdemux, stream, &br,
+                  qtdemux->info_sizes, qtdemux->sample_count)) {
+            GST_ERROR_OBJECT (qtdemux, "failed to parse cenc auxiliary info");
+            g_free (qtdemux->info_sizes);
+            qtdemux->info_sizes = NULL;
+            goto fail;
+          }
           goto fail;
         }
       }
-      g_free (info_sizes);
     }
 
     tfdt_node =
@@ -5932,6 +5943,28 @@ gst_qtdemux_process_adapter (GstQTDemux * demux, gboolean force)
         }
 
         if (demux->todrop) {
+          if (demux->cenc_aux_info_offset > 0) {
+            GstByteReader br;
+            const guint8 *data;
+
+            GST_DEBUG_OBJECT (demux, "parsing cenc auxiliary info");
+            data = gst_adapter_map (demux->adapter, demux->todrop);
+            gst_byte_reader_init (&br, data + 8, demux->todrop);
+            if (!qtdemux_parse_cenc_aux_info (demux, demux->streams[0], &br,
+                    demux->info_sizes, demux->sample_count)) {
+              GST_ERROR_OBJECT (demux, "failed to parse cenc auxiliary info");
+              ret = GST_FLOW_ERROR;
+              gst_adapter_unmap (demux->adapter);
+              g_free (demux->info_sizes);
+              demux->info_sizes = NULL;
+              goto done;
+            }
+            demux->cenc_aux_info_offset = 0;
+            g_free (demux->info_sizes);
+            demux->info_sizes = NULL;
+
+            gst_adapter_unmap (demux->adapter);
+          }
           gst_qtdemux_drop_data (demux, demux->todrop);
         }
 
diff --git a/gst/isomp4/qtdemux.h b/gst/isomp4/qtdemux.h
index 8f0553b..a34f380 100644
--- a/gst/isomp4/qtdemux.h
+++ b/gst/isomp4/qtdemux.h
@@ -149,6 +149,10 @@ struct _GstQTDemux {
   /* protection support */
   GPtrArray *protection_system_ids; /* Holds identifiers of all content protection systems for all tracks */
   GQueue protection_event_queue; /* holds copy of upstream protection events */
+  guint64 cenc_aux_info_offset;
+  guint8 *info_sizes;
+  guint32 sample_count;
+
 };
 
 struct _GstQTDemuxClass {
-- 
1.8.3.2

