From c0fc7c2540a060ca7adf9b02aa946bff9f869b08 Mon Sep 17 00:00:00 2001
From: Philippe Normand <philn@igalia.com>
Date: Wed, 3 Jun 2015 15:25:28 +0200
Subject: [PATCH 2/4] qtdemux: support for cenc auxiliary info parsing outside
 of moof box

When the cenc aux info index is out of moof boundaries, keep track of
it and parse the beginning of the mdat box, before the first sample.

https://bugzilla.gnome.org/show_bug.cgi?id=705991
---
 gst/isomp4/qtdemux.c | 87 ++++++++++++++++++++++++++++++----------------------
 gst/isomp4/qtdemux.h |  5 +++
 2 files changed, 55 insertions(+), 37 deletions(-)

diff --git a/gst/isomp4/qtdemux.c b/gst/isomp4/qtdemux.c
index e50fb7f..2da90ff 100644
--- a/gst/isomp4/qtdemux.c
+++ b/gst/isomp4/qtdemux.c
@@ -606,6 +606,7 @@ gst_qtdemux_init (GstQTDemux * qtdemux)
   qtdemux->have_group_id = FALSE;
   qtdemux->group_id = G_MAXUINT;
   qtdemux->protection_system_ids = NULL;
+  qtdemux->cenc_aux_info_offset = 0;
   gst_segment_init (&qtdemux->segment, GST_FORMAT_TIME);
   qtdemux->flowcombiner = gst_flow_combiner_new ();
 
@@ -623,6 +624,11 @@ gst_qtdemux_dispose (GObject * object)
   }
   gst_flow_combiner_free (qtdemux->flowcombiner);
 
+  if (qtdemux->info_sizes) {
+    g_array_free (qtdemux->info_sizes, TRUE);
+    qtdemux->info_sizes = NULL;
+  }
+
   G_OBJECT_CLASS (parent_class)->dispose (object);
 }
 
@@ -3043,8 +3049,7 @@ qtdemux_get_cenc_sample_properties (GstQTDemux * qtdemux,
  * as given in a saiz box. Returns TRUE if successful; FALSE otherwise. */
 static gboolean
 qtdemux_parse_saiz (GstQTDemux * qtdemux, QtDemuxStream * stream,
-    GstByteReader * br, guint32 * info_type, guint32 * info_type_parameter,
-    guint8 * default_info_size, GArray ** info_sizes, guint32 * sample_count)
+    GstByteReader * br, guint32 * info_type, guint32 * info_type_parameter)
 {
   guint32 flags = 0;
   guint32 aux_info_type = 0;
@@ -3054,9 +3059,6 @@ qtdemux_parse_saiz (GstQTDemux * qtdemux, QtDemuxStream * stream,
   g_return_val_if_fail (qtdemux != NULL, FALSE);
   g_return_val_if_fail (stream != NULL, FALSE);
   g_return_val_if_fail (br != NULL, FALSE);
-  g_return_val_if_fail (default_info_size != NULL, FALSE);
-  g_return_val_if_fail (info_sizes != NULL, FALSE);
-  g_return_val_if_fail (sample_count != NULL, FALSE);
 
   if (!gst_byte_reader_get_uint32_be (br, &flags))
     return FALSE;
@@ -3081,24 +3083,25 @@ qtdemux_parse_saiz (GstQTDemux * qtdemux, QtDemuxStream * stream,
       "aux_info_type_parameter:  %#06x",
       GST_FOURCC_ARGS (aux_info_type), aux_info_type_parameter);
 
-  if (!gst_byte_reader_get_uint8 (br, default_info_size))
+  if (!gst_byte_reader_get_uint8 (br, &qtdemux->default_info_size))
     return FALSE;
-  GST_DEBUG_OBJECT (qtdemux, "default_info_size: %u", *default_info_size);
+  GST_DEBUG_OBJECT (qtdemux, "default_info_size: %u",
+      qtdemux->default_info_size);
 
-  if (!gst_byte_reader_get_uint32_be (br, sample_count))
+  if (!gst_byte_reader_get_uint32_be (br, &qtdemux->sample_count))
     return FALSE;
-  GST_DEBUG_OBJECT (qtdemux, "sample_count: %u", *sample_count);
+  GST_DEBUG_OBJECT (qtdemux, "sample_count: %u", qtdemux->sample_count);
 
-  if (*default_info_size == 0) {
-    *info_sizes =
-        g_array_sized_new (FALSE, TRUE, sizeof (guint8), *sample_count);
+  if (qtdemux->default_info_size == 0) {
+    qtdemux->info_sizes =
+        g_array_sized_new (FALSE, TRUE, sizeof (guint8), qtdemux->sample_count);
 
-    if (!gst_byte_reader_get_data (br, *sample_count, &data))
+    if (!gst_byte_reader_get_data (br, qtdemux->sample_count, &data))
       return FALSE;
 
-    g_array_insert_vals (*info_sizes, 0, data, *sample_count);
+    g_array_insert_vals (qtdemux->info_sizes, 0, data, qtdemux->sample_count);
   } else {
-    *info_sizes = NULL;
+    qtdemux->info_sizes = NULL;
   }
 
   return TRUE;
@@ -3177,8 +3180,7 @@ qtdemux_parse_saio (GstQTDemux * qtdemux, QtDemuxStream * stream,
  * ISO/IEC 23001-7. Returns TRUE if successful; FALSE otherwise. */
 static gboolean
 qtdemux_parse_cenc_aux_info (GstQTDemux * qtdemux, QtDemuxStream * stream,
-    GstByteReader * br, guint8 default_info_size, GArray * info_sizes,
-    guint32 sample_count)
+    GstByteReader * br)
 {
   QtDemuxCencSampleSetInfo *ss_info = NULL;
   guint8 size;
@@ -3191,8 +3193,8 @@ qtdemux_parse_cenc_aux_info (GstQTDemux * qtdemux, QtDemuxStream * stream,
   g_return_val_if_fail (stream->protection_scheme_info != NULL, FALSE);
 
   /* Must have a non-zero default_info_size if no array of sizes is provided. */
-  if (!info_sizes)
-    g_return_val_if_fail (default_info_size > 0, FALSE);
+  if (!qtdemux->info_sizes)
+    g_return_val_if_fail (qtdemux->default_info_size > 0, FALSE);
 
   ss_info = (QtDemuxCencSampleSetInfo *) stream->protection_scheme_info;
 
@@ -3203,7 +3205,7 @@ qtdemux_parse_cenc_aux_info (GstQTDemux * qtdemux, QtDemuxStream * stream,
 
   ss_info->crypto_info = gst_caps_new_empty ();
 
-  for (i = 0; i < sample_count; ++i) {
+  for (i = 0; i < qtdemux->sample_count; ++i) {
     GstStructure *properties;
     guint16 n_subsamples;
     guint8 *data;
@@ -3232,8 +3234,9 @@ qtdemux_parse_cenc_aux_info (GstQTDemux * qtdemux, QtDemuxStream * stream,
     }
     gst_structure_set (properties, "iv", GST_TYPE_BUFFER, buf, NULL);
 
-    size = (info_sizes) ?
-        g_array_index (info_sizes, guint8, i) : default_info_size;
+    size = (qtdemux->info_sizes) ?
+        g_array_index (qtdemux->info_sizes, guint8,
+        i) : qtdemux->default_info_size;
 
     if (size > iv_size) {
       if (!gst_byte_reader_get_uint16_be (br, &n_subsamples)
@@ -3243,7 +3246,8 @@ qtdemux_parse_cenc_aux_info (GstQTDemux * qtdemux, QtDemuxStream * stream,
             "failed to get subsample count for sample %u", i);
         return FALSE;
       }
-      GST_LOG_OBJECT (qtdemux, "subsample count: %u", n_subsamples);
+      GST_LOG_OBJECT (qtdemux, "subsample count for sample %u: %u", i,
+          n_subsamples);
       gst_structure_set (properties, "subsample_count", G_TYPE_UINT,
           n_subsamples, NULL);
 
@@ -3394,12 +3398,9 @@ qtdemux_parse_moof (GstQTDemux * qtdemux, const guint8 * buffer, guint length,
         qtdemux_tree_get_child_by_type_full (traf_node, FOURCC_saiz,
         &saiz_data);
     if (saiz_node) {
-      guint8 default_info_size = 0;
-      GArray *info_sizes = NULL;
-      guint32 sample_count;
 
       if (G_UNLIKELY (!qtdemux_parse_saiz (qtdemux, stream, &saiz_data, NULL,
-                  NULL, &default_info_size, &info_sizes, &sample_count))) {
+                  NULL))) {
         GST_ERROR_OBJECT (qtdemux, "failed to parse saiz box");
       } else {
         saio_node =
@@ -3418,16 +3419,15 @@ qtdemux_parse_moof (GstQTDemux * qtdemux, const guint8 * buffer, guint length,
           offset += (base_offset > 0) ? (guint64) base_offset : 0;
 
           if (info_type == FOURCC_cenc && info_type_parameter == 0U) {
+            GstByteReader br;
             if (offset > length) {
-              GST_ERROR_OBJECT (qtdemux, "cenc auxiliary info outside moof "
-                  "boxes is not supported");
-              goto fail;
+              GST_DEBUG_OBJECT (qtdemux,
+                  "cenc auxiliary info stored out of moof");
+              qtdemux->cenc_aux_info_offset = offset;
             } else {
-              GstByteReader br = GST_BYTE_READER_INIT (buffer + offset,
-                  length - offset);
+              gst_byte_reader_init (&br, buffer + offset, length - offset);
 
-              if (!qtdemux_parse_cenc_aux_info (qtdemux, stream, &br,
-                      default_info_size, info_sizes, sample_count)) {
+              if (!qtdemux_parse_cenc_aux_info (qtdemux, stream, &br)) {
                 GST_ERROR_OBJECT (qtdemux,
                     "failed to parse cenc auxiliary info");
                 goto fail;
@@ -3438,9 +3438,6 @@ qtdemux_parse_moof (GstQTDemux * qtdemux, const guint8 * buffer, guint length,
           GST_INFO_OBJECT (qtdemux,
               "saiz box without a corresponding saio box");
         }
-
-        if (info_sizes)
-          g_array_free (info_sizes, TRUE);
       }
     }
 
@@ -5949,6 +5946,22 @@ gst_qtdemux_process_adapter (GstQTDemux * demux, gboolean force)
         }
 
         if (demux->todrop) {
+          if (demux->cenc_aux_info_offset > 0) {
+            GstByteReader br;
+            const guint8 *data;
+
+            GST_DEBUG_OBJECT (demux, "parsing cenc auxiliary info");
+            data = gst_adapter_map (demux->adapter, demux->todrop);
+            gst_byte_reader_init (&br, data + 8, demux->todrop);
+            if (!qtdemux_parse_cenc_aux_info (demux, demux->streams[0], &br)) {
+              GST_ERROR_OBJECT (demux, "failed to parse cenc auxiliary info");
+              ret = GST_FLOW_ERROR;
+              gst_adapter_unmap (demux->adapter);
+              goto done;
+            }
+            demux->cenc_aux_info_offset = 0;
+            gst_adapter_unmap (demux->adapter);
+          }
           gst_qtdemux_drop_data (demux, demux->todrop);
         }
 
diff --git a/gst/isomp4/qtdemux.h b/gst/isomp4/qtdemux.h
index b332b3d..6440cb2 100644
--- a/gst/isomp4/qtdemux.h
+++ b/gst/isomp4/qtdemux.h
@@ -148,6 +148,11 @@ struct _GstQTDemux {
 
   /* Holds identifiers of all content protection systems for all tracks */
   GPtrArray *protection_system_ids;
+
+  guint64 cenc_aux_info_offset;
+  guint8 default_info_size ;
+  GArray *info_sizes;
+  guint32 sample_count;
 };
 
 struct _GstQTDemuxClass {
-- 
2.1.4

