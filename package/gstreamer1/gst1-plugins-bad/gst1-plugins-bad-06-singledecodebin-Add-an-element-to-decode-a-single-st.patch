From 3a0cf94af900b5388729e53882323a41c736bf5a Mon Sep 17 00:00:00 2001
From: Arun Raghavan <arun@centricular.com>
Date: Thu, 22 Jan 2015 20:25:45 +0530
Subject: [PATCH 6/7] singledecodebin: Add an element to decode a single stream

This is a convenience bin for when one wants to plug in a decodebin for
a single stream without having to deal with sometimes pads (since there
is only one stream, decodebin will only have one srcpad).

https://bugzilla.gnome.org/show_bug.cgi?id=743511
---
 configure.ac                             |   2 +
 gst/singledecodebin/Makefile.am          |  25 ++++++
 gst/singledecodebin/gstsingledecodebin.c | 126 +++++++++++++++++++++++++++++++
 gst/singledecodebin/gstsingledecodebin.h |  49 ++++++++++++
 4 files changed, 202 insertions(+)
 create mode 100644 gst/singledecodebin/Makefile.am
 create mode 100644 gst/singledecodebin/gstsingledecodebin.c
 create mode 100644 gst/singledecodebin/gstsingledecodebin.h

diff --git a/configure.ac b/configure.ac
index cd3f893..a5ace99 100644
--- a/configure.ac
+++ b/configure.ac
@@ -481,6 +481,7 @@ AG_GST_CHECK_PLUGIN(rtp)
 AG_GST_CHECK_PLUGIN(sdi)
 AG_GST_CHECK_PLUGIN(sdp)
 AG_GST_CHECK_PLUGIN(segmentclip)
+AG_GST_CHECK_PLUGIN(singledecodebin)
 AG_GST_CHECK_PLUGIN(siren)
 AG_GST_CHECK_PLUGIN(smooth)
 AG_GST_CHECK_PLUGIN(speed)
@@ -3181,6 +3182,7 @@ gst/rtp/Makefile
 gst/sdi/Makefile
 gst/sdp/Makefile
 gst/segmentclip/Makefile
+gst/singledecodebin/Makefile
 gst/siren/Makefile
 gst/smooth/Makefile
 gst/speed/Makefile
diff --git a/gst/singledecodebin/Makefile.am b/gst/singledecodebin/Makefile.am
new file mode 100644
index 0000000..40d5b99
--- /dev/null
+++ b/gst/singledecodebin/Makefile.am
@@ -0,0 +1,25 @@
+plugin_LTLIBRARIES = libgstsingledecodebin.la
+
+libgstsingledecodebin_la_SOURCES = gstsingledecodebin.c
+
+libgstsingledecodebin_la_CFLAGS = $(GST_CFLAGS)
+libgstsingledecodebin_la_LIBADD = $(GST_LIBS)
+libgstsingledecodebin_la_LDFLAGS = $(GST_PLUGIN_LDFLAGS)
+libgstsingledecodebin_la_LIBTOOLFLAGS = $(GST_PLUGIN_LIBTOOLFLAGS)
+
+noinst_HEADERS = gstsingledecodebin.h
+
+Android.mk: Makefile.am $(BUILT_SOURCES)
+	androgenizer \
+	-:PROJECT libgstsingledecodebin -:SHARED libgstsingledecodebin \
+	 -:TAGS eng debug \
+         -:REL_TOP $(top_srcdir) -:ABS_TOP $(abs_top_srcdir) \
+	 -:SOURCES $(libgstsingledecodebin_la_SOURCES) \
+	 -:CFLAGS $(DEFS) $(DEFAULT_INCLUDES) \
+	          $(libgstsingledecodebin_la_CFLAGS) \
+	 -:LDFLAGS $(libgstsingledecodebin_la_LDFLAGS) \
+	           $(libgstsingledecodebin_la_LIBADD) \
+	           -ldl \
+	 -:PASSTHROUGH LOCAL_ARM_MODE:=arm \
+		       LOCAL_MODULE_PATH:='$$(TARGET_OUT)/lib/gstreamer-0.10' \
+	> $@
diff --git a/gst/singledecodebin/gstsingledecodebin.c b/gst/singledecodebin/gstsingledecodebin.c
new file mode 100644
index 0000000..0652ad4
--- /dev/null
+++ b/gst/singledecodebin/gstsingledecodebin.c
@@ -0,0 +1,126 @@
+/* GStreamer
+ * Copyright (C) 2015 Centricular Ltd.
+ * Author: Arun Raghavan <arun@centricular.com>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 51 Franklin Street, Suite 500,
+ * Boston, MA 02110-1335, USA.
+ */
+
+/**
+ * SECTION:element-gstsingledecodebin
+ *
+ * The singledecodebin element takes a given stream and just decodes it. As a
+ * result, it provides exactly one sink and source pad.
+ */
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include "gstsingledecodebin.h"
+
+#define parent_class gst_single_decode_bin_parent_class
+G_DEFINE_TYPE (GstSingleDecodeBin, gst_single_decode_bin, GST_TYPE_BIN);
+
+GST_DEBUG_CATEGORY_STATIC (gst_single_decode_bin_debug_category);
+#define GST_CAT_DEFAULT gst_single_decode_bin_debug_category
+
+static GstStaticPadTemplate sink_template = GST_STATIC_PAD_TEMPLATE ("sink",
+    GST_PAD_SINK,
+    GST_PAD_ALWAYS,
+    GST_STATIC_CAPS ("ANY")
+    );
+
+static GstStaticPadTemplate src_template = GST_STATIC_PAD_TEMPLATE ("src",
+    GST_PAD_SRC,
+    GST_PAD_ALWAYS,
+    GST_STATIC_CAPS ("ANY")
+    );
+
+static void
+dbin_pad_added_cb (GstElement * dbin, GstPad * pad,
+    gpointer user_data G_GNUC_UNUSED)
+{
+  GstPad *srcpad;
+  GstSingleDecodeBin *sdbin =
+      GST_SINGLE_DECODE_BIN (gst_element_get_parent (dbin));
+
+  if (sdbin->connected) {
+    GST_WARNING_OBJECT (sdbin, "Ignoring new decodebin pad");
+    return;
+  }
+
+  srcpad = gst_element_get_static_pad (GST_ELEMENT (sdbin), "src");
+  gst_ghost_pad_set_target (GST_GHOST_PAD (srcpad), pad);
+  gst_object_unref (srcpad);
+
+  sdbin->connected = TRUE;
+}
+
+static void
+gst_single_decode_bin_init (GstSingleDecodeBin * sdbin)
+{
+  GstElement *decodebin;
+  GstPad *sinkpad;
+
+  decodebin = gst_element_factory_make ("decodebin", "singledecodebin-dbin");
+  g_return_if_fail (decodebin != NULL);
+
+  g_signal_connect (decodebin, "pad-added", G_CALLBACK (dbin_pad_added_cb),
+      NULL);
+
+  gst_bin_add (GST_BIN (sdbin), decodebin);
+
+  sinkpad = gst_element_get_static_pad (decodebin, "sink");
+  gst_element_add_pad (GST_ELEMENT (sdbin),
+      gst_ghost_pad_new ("sink", sinkpad));
+  gst_object_unref (sinkpad);
+
+  gst_element_add_pad (GST_ELEMENT (sdbin),
+      gst_ghost_pad_new_no_target ("src", GST_PAD_SRC));
+
+  sdbin->connected = FALSE;
+}
+
+static void
+gst_single_decode_bin_class_init (GstSingleDecodeBinClass * sdbin_class)
+{
+  GstElementClass *element_class = GST_ELEMENT_CLASS (sdbin_class);
+
+  gst_element_class_set_static_metadata (element_class, "Single Decode Bin",
+      "Decoder/Bin", "Decode a single stream",
+      "Arun Raghavan <arun@centricular.com>");
+
+  gst_element_class_add_pad_template (element_class,
+      gst_static_pad_template_get (&sink_template));
+  gst_element_class_add_pad_template (element_class,
+      gst_static_pad_template_get (&src_template));
+
+  GST_DEBUG_CATEGORY_INIT (gst_single_decode_bin_debug_category,
+      "singledecodebin", 0, "debug category for the single decodebin element");
+}
+
+static gboolean
+plugin_init (GstPlugin * plugin)
+{
+  return gst_element_register (plugin, "singledecodebin", GST_RANK_NONE,
+      GST_TYPE_SINGLE_DECODE_BIN);
+}
+
+GST_PLUGIN_DEFINE (GST_VERSION_MAJOR,
+    GST_VERSION_MINOR,
+    singledecodebin,
+    "Decodes a single stream",
+    plugin_init, VERSION, GST_LICENSE, GST_PACKAGE_NAME, GST_PACKAGE_ORIGIN);
diff --git a/gst/singledecodebin/gstsingledecodebin.h b/gst/singledecodebin/gstsingledecodebin.h
new file mode 100644
index 0000000..3b52d3d
--- /dev/null
+++ b/gst/singledecodebin/gstsingledecodebin.h
@@ -0,0 +1,49 @@
+/* GStreamer
+ * Copyright (C) 2015 Centricular Ltd.
+ * Author: Arun Raghavan <arun@centricular.com>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 51 Franklin Street, Suite 500,
+ * Boston, MA 02110-1335, USA.
+ */
+
+#include <gst/gst.h>
+
+G_BEGIN_DECLS
+
+typedef struct {
+  GstBin parent;
+  gboolean connected;
+} GstSingleDecodeBin;
+
+typedef struct {
+  GstBinClass parent;
+} GstSingleDecodeBinClass;
+
+#define GST_TYPE_SINGLE_DECODE_BIN \
+  (gst_single_decode_bin_get_type ())
+#define GST_SINGLE_DECODE_BIN(obj) \
+  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_SINGLE_DECODE_BIN, \
+                               GstSingleDecodeBin))
+#define GST_SINGLE_DECODE_BIN_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_CAST ((klass), GST_TYPE_SINGLE_DECODE_BIN, \
+                            GstSingleDecodeBinClass))
+#define GST_IS_SINGLE_DECODE_BIN(obj) \
+  (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GST_TYPE_SINGLE_DECODE_BIN))
+#define GST_IS_SINGLE_DECODE_BIN_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_TYPE ((klass), GST_TYPE_SINGLE_DECODE_BIN))
+
+GType gst_single_decode_bin_get_type (void);
+
+G_END_DECLS
-- 
2.1.4

