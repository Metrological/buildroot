From 7296068ce76be5e0c33fd70918688f7ffb24bc72 Mon Sep 17 00:00:00 2001
From: Allan Sandfeld Jensen <allan.jensen@digia.com>
Date: Tue, 28 Oct 2014 10:04:13 +0100
Subject: [PATCH] Do not use unaligned access when disabled

Use the GCC feature defines to check for support for ARMv6 style
unaligned access support. This fixes configurations where it was
disabled and the ARMv6-M processors where it is not supported.

Change-Id: I00c9bb19ba582b64ecb9eaa6da9887ba0df8fd3c
Reviewed-by: Julien Brianceau <jbriance@cisco.com>
Reviewed-by: Jocelyn Turcotte <jocelyn.turcotte@digia.com>
---
 Source/JavaScriptCore/assembler/MacroAssemblerARM.cpp |  2 +-
 Source/JavaScriptCore/assembler/MacroAssemblerARM.h   |  2 +-
 Source/WTF/wtf/Platform.h                             | 18 +++++++++++-------
 3 files changed, 13 insertions(+), 9 deletions(-)

diff --git a/Source/JavaScriptCore/assembler/MacroAssemblerARM.cpp b/Source/JavaScriptCore/assembler/MacroAssemblerARM.cpp
index 6fc08bc..ca0fa21 100644
--- a/Source/JavaScriptCore/assembler/MacroAssemblerARM.cpp
+++ b/Source/JavaScriptCore/assembler/MacroAssemblerARM.cpp
@@ -70,7 +70,7 @@ static bool isVFPPresent()
 
 const bool MacroAssemblerARM::s_isVFPPresent = isVFPPresent();
 
-#if CPU(ARMV5_OR_LOWER)
+#if !CPU(ARM_FEATURE_UNALIGNED)
 /* On ARMv5 and below, natural alignment is required. */
 void MacroAssemblerARM::load32WithUnalignedHalfWords(BaseIndex address, RegisterID dest)
 {
diff --git a/Source/JavaScriptCore/assembler/MacroAssemblerARM.h b/Source/JavaScriptCore/assembler/MacroAssemblerARM.h
index 9058514..d909341 100644
--- a/Source/JavaScriptCore/assembler/MacroAssemblerARM.h
+++ b/Source/JavaScriptCore/assembler/MacroAssemblerARM.h
@@ -393,7 +393,7 @@ class MacroAssemblerARM : public AbstractMacroAssembler<ARMAssembler> {
         m_assembler.baseIndexTransfer32(ARMAssembler::LoadUint32, dest, address.base, address.index, static_cast<int>(address.scale), address.offset);
     }
 
-#if CPU(ARMV5_OR_LOWER)
+#if !CPU(ARM_FEATURE_UNALIGNED)
     void load32WithUnalignedHalfWords(BaseIndex address, RegisterID dest);
 #else
     void load32WithUnalignedHalfWords(BaseIndex address, RegisterID dest)
diff --git a/Source/WTF/wtf/Platform.h b/Source/WTF/wtf/Platform.h
index a4635a4..2564744 100644
--- a/Source/WTF/wtf/Platform.h
+++ b/Source/WTF/wtf/Platform.h
@@ -288,14 +288,18 @@
 #define WTF_THUMB_ARCH_VERSION 0
 #endif
 
-
-/* CPU(ARMV5_OR_LOWER) - ARM instruction set v5 or earlier */
-/* On ARMv5 and below the natural alignment is required. 
-   And there are some other differences for v5 or earlier. */
-#if !defined(ARMV5_OR_LOWER) && !WTF_ARM_ARCH_AT_LEAST(6)
-#define WTF_CPU_ARMV5_OR_LOWER 1
+/* CPU(ARM_FEATURE_UNALIGNED) - ARM instruction set supports unaligned access */
+/* On ARMv5 and below the natural alignment is required. */
+#if !defined(WTF_CPU_ARM_FEATURE_UNALIGNED)
+#if COMPILER(GCC) && GCC_VERSION_AT_LEAST(4, 7, 0)
+/* Check for feature define in case we are building with -mno-unaligned-access or for ARMv6-M */
+#if defined(__ARM_FEATURE_UNALIGNED)
+#define WTF_CPU_ARM_FEATURE_UNALIGNED 1
+#endif
+#elif WTF_ARM_ARCH_AT_LEAST(6)
+#define WTF_CPU_ARM_FEATURE_UNALIGNED 1
+#endif
 #endif
-
 
 /* CPU(ARM_TRADITIONAL) - Thumb2 is not available, only traditional ARM (v4 or greater) */
 /* CPU(ARM_THUMB2) - Thumb2 instruction set is available */
